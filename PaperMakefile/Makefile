
# configuration variables
BASENAME=mypaper
pdflatex=pdflatex
image-path=images
# derived variables (override if needed)
BIB=${BASENAME}.bib

# one can create a user-specific plugin to this makefile
-include makefile-ext.mk

# OPT: following line allows packages like "minted" to call external commands
#pdflatex := ${pdflatex} -shell-escape


# features that are possible but not included for now (please open a feature request)
## - automatic eps to pdf
## - optimization (in terms of size) of pdf generated by inkscape, especially with embedded raster images
## - gnuplot files to svg

# (internal) tools
## recursive wildcard
rwildcard=$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) $(filter $(subst *,%,$2),$d))



# (internal) derived variables
svg-files = $(call rwildcard,${image-path},*.svg)
svg-files-in-pdf = $(patsubst %.svg,%.pdf,${svg-files})
PDFDEPS = ${BASENAME}.tex $(call rwildcard,,*.bib) $(call rwildcard,,*.tex) ${svg-files-in-pdf} Makefile



# (internal) Targets of the Makefile

${BASENAME}.pdf: ${PDFDEPS}
	${pdflatex} -halt-on-error $<
	if test -f ${BIB} ; then bibtex   ${BASENAME} ; fi
	${pdflatex} $<
	${pdflatex} $<
	@echo "Making some classical checks on the pdf"
	@echo "=> looking for '?' in the PDF (that might be a missing reference)"
	@pdftotext $@ - | grep -Hrn '[?]' -  | awk '{print "   - ?: " $$0}' | grep --color '[?]' || true
	@echo "=> looking for 'TODO' in the PDF"
	@pdftotext $@ - | grep -Hrni 'TODO' -  | awk '{print "   - TODO: " $$0}' | grep --color -i  'TODO' || true
	@echo "=> looking for 'TODO' in tex files"
	@grep -Hrni '^ *[^%].*TODO' $(call rwildcard,,*.tex) | awk '{print "   - TODO: " $$0}' | grep --color -i  'TODO' || true
	@echo "=> looking for ' ~' or '~ ' in the tex files (double spacing)"
	@grep -Hrni '\( ~\|~ \)' $(call rwildcard,,*.tex) | awk '{print "   - ~ (double space): " $$0}' | grep --color  '\( ~\|~ \)' || true

fast:
	make ${PDFDEPS}
#	${BASENAME}.tex $(call rwildcard,,*.bib) $(call rwildcard,,*.tex)
	if test -f ${BASENAME}.bib ; then bibtex ${BASENAME} || make ; fi
	${pdflatex} -halt-on-error ${BASENAME}.tex || echo -e "\033[0;31m ========== NOT OK ========== \033[0m"

continuous:
	make fast
	(which inotifywait && inotifywait -r -m . --exclude '^./([.]#.*|#.*|.*~|${BASENAME}[.][^t]..|.*lock|flycheck_.*[.]tex|[.]git/.*|[^/]*.py|.*[.]out|.*[.]err)$$' -e MODIFY -e CREATE | while read line ; do echo =================== $$line; make fast ; done) || true
	which inotifywait || while true ; do sleep .25; for i in ${PDFDEPS} ; do if test $$i -nt ${BASENAME}.pdf ; then make fast; break; fi ; done ; done

.PHONY: export export-images clean latexdiff fast continuous

clean:
	rm -f ${BASENAME}.pdf ${BASENAME}.aux ${BASENAME}.bbl ${BASENAME}.blg ${BASENAME}.log ${BASENAME}.toc

$(svg-files-in-pdf): %.pdf: %.svg
	inkscape -T $(patsubst %.pdf,%.svg,$@) --export-pdf=$@

reconvert-svg:
	make $(svg-files-in-pdf)

export:
	rm -rf export
	mkdir export
	cat ${BASENAME}.tex | awk '/\\listfiles/ {next} /\\documentclass.*/ {print; print "\\listfiles"; next} // {print}' > ,,.tex
	cp ${BASENAME}.tex export/
# adding the base tex file (as it is not listed)
# adding the bibs also (as it uses the bbl actually) as they are useful to rebuild from scratch
	for i in ${BASENAME}.tex $$(find . -name \*.bib) $$(max_print_line=1000 ${pdflatex} ,,.tex | awk '/ *\*File List\*/ {show=1; next;} / \*\*\*\*\*+/ {show=0;next} // {if (show) {print}}') ; do if test -f $$i ; then mkdir -p export/$$(dirname $$i) && cp $$i export/$$(dirname $$i)/ ; fi ; done
	rm -f ,,.tex
	echo > export/Makefile
	echo ${BASENAME}.pdf: >> export/Makefile
	echo "	"${pdflatex} ${BASENAME}.tex >> export/Makefile
	if test -f ${BIB} ; then echo "	"bibtex ${BASENAME} >> export/Makefile ; fi
	echo "	"${pdflatex} ${BASENAME}.tex >> export/Makefile
	echo "	"${pdflatex} ${BASENAME}.tex >> export/Makefile
	echo .PHONY: ${BASENAME}.pdf >> export/Makefile


# used to export images (for IEEE journal(s?)): might need to adapt things (especially if you have tables to skip), need to uncomment update the choice of the teaser image and the author names.
export-images:
	make reconvert-svg
	rm -rf export-images
	mkdir export-images
	cat ${BASENAME}.tex | awk ' /\\begin{document}.*/ {print "\\usepackage[active,floats,graphics,tightpage,pdflatex]{preview}" ; print "\\renewcommand{\\caption}[1]{}" ; print ; next} // {print}' > ,,.tex
	${pdflatex} ,,.tex
	if test -f ${BIB} ; then bibtex   ,, ; fi
	${pdflatex} ,,.tex
	${pdflatex} ,,.tex
##	 extract and convert each page, pdftk not working here... but don't know why
	for i in $$(seq 30)  ; do pdftops -eps -level3 -f $$i -l $$i ,,.pdf export-images/"Figure $$i.eps" || true           ; done
##	if you have to skip things (e.g., due to a table), change the seq above and use the below to complete (it offsets by one with the "-1")â€¦ take inspiration
#	for i in 21 22 23 24 25 26 27 28 ; do pdftops -eps -level3 -f $$i -l $$i ,,.pdf export-images/"Figure $$(($$i - 1)).eps" ; done
## 	Below: use special raster option to convert an image with anoying semi transparent things
#	pdftops -eps -level3 -f 28 -l 28 -r 1800 ,,.pdf export-images/"Figure 27.eps"
##	Below: other files
#	cp export-images/"Figure 1.eps" export-images/"Teaser Image.eps"
#	cp images/guy1.jpg export-images/
#	cp images/guy2.jpg export-images/
#	cp images/guy3.jpg export-images/
#	cp Author-Copies-tpami.pdf export-images/
	rm -f ,,.tex



with=NONE
upto="--"
latexdiff:
	@test ${with} '!=' NONE || (echo -e -n "\n\nPlease check you saved/commited everything and use something like \n    make latexdiff with=HEAD^\n\n"; false)
	git latexdiff --main ${BASENAME}.tex --ignore-latex-errors --ln-untracked --ignore-makefile ${with} ${upto}

